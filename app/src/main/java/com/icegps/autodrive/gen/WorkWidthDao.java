package com.icegps.autodrive.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.icegps.autodrive.data.WorkWidth;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORK_WIDTH".
*/
public class WorkWidthDao extends AbstractDao<WorkWidth, Long> {

    public static final String TABLENAME = "WORK_WIDTH";

    /**
     * Properties of entity WorkWidth.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WorkWidth = new Property(0, float.class, "workWidth", false, "WORK_WIDTH");
        public final static Property Offset = new Property(1, float.class, "offset", false, "OFFSET");
        public final static Property Distance = new Property(2, float.class, "distance", false, "DISTANCE");
        public final static Property WorkName = new Property(3, String.class, "workName", false, "WORK_NAME");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
    }


    public WorkWidthDao(DaoConfig config) {
        super(config);
    }
    
    public WorkWidthDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORK_WIDTH\" (" + //
                "\"WORK_WIDTH\" REAL NOT NULL ," + // 0: workWidth
                "\"OFFSET\" REAL NOT NULL ," + // 1: offset
                "\"DISTANCE\" REAL NOT NULL ," + // 2: distance
                "\"WORK_NAME\" TEXT," + // 3: workName
                "\"_id\" INTEGER PRIMARY KEY );"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORK_WIDTH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkWidth entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getWorkWidth());
        stmt.bindDouble(2, entity.getOffset());
        stmt.bindDouble(3, entity.getDistance());
 
        String workName = entity.getWorkName();
        if (workName != null) {
            stmt.bindString(4, workName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkWidth entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getWorkWidth());
        stmt.bindDouble(2, entity.getOffset());
        stmt.bindDouble(3, entity.getDistance());
 
        String workName = entity.getWorkName();
        if (workName != null) {
            stmt.bindString(4, workName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public WorkWidth readEntity(Cursor cursor, int offset) {
        WorkWidth entity = new WorkWidth( //
            cursor.getFloat(offset + 0), // workWidth
            cursor.getFloat(offset + 1), // offset
            cursor.getFloat(offset + 2), // distance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // workName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkWidth entity, int offset) {
        entity.setWorkWidth(cursor.getFloat(offset + 0));
        entity.setOffset(cursor.getFloat(offset + 1));
        entity.setDistance(cursor.getFloat(offset + 2));
        entity.setWorkName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkWidth entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkWidth entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkWidth entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
